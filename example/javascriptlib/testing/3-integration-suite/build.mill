// This is a `Fastify`-based application managed and built using Mill.
// It demonstrates the execution of end-to-end integration tests using browser automation tools

// The demo uses Cypress and Playwright.

//// SNIPPET:BUILD
package build
import mill._, javascriptlib._

object web extends TypeScriptModule {

  def npmDeps =
    Seq("fastify@^4.26.0")

  def npmDevDeps =
    super.npmDevDeps() ++ Seq("@playwright/test@^1.49.1", "cypress@^13.17.0")

  def forkEnv = super.forkEnv() + ("PORT" -> "3000")

  /**
   * This customizes [[compilerOptions]] and [[compilerOptionsPaths]] because type declarations for Fastify
   * are not in the default location for `tsc` to find them (i.e. "node_modules/@types/fastify").
   *
   * Fastify's types are instead bundled inside it's npm package (i.e. "node_modules/fastify").
   * The override fixes this by explicitly setting `tsconfig.json#baseUrl` to the full path to "node_modules".
   *
   * See https://stackoverflow.com/a/74917456/ and
   * related explanation https://github.com/microsoft/TypeScript/issues/22217#issuecomment-369783776
   */
  def compilerOptions: T[Map[String, ujson.Value]] = Task {
    super.compilerOptions() ++
      Map("baseUrl" -> ujson.Str((npmInstall().path / "node_modules").toString))
  }

  def compilerOptionsPaths: Task[Map[String, String]] = Task.Anon { Map("*" -> "*") }

  object playwright extends TypeScriptTests with TestModule.Playwright {
    def compilerOptions = Task { super.compilerOptions() }
    def compilerOptionsPaths = Task { super.compilerOptionsPaths() }
  }
//  object cypress extends TypeScriptTests with TestModule.Vitest

}
//// SNIPPET:END

// The original `package.json` used to set-up the project is reproduced below:
//// SNIPPET:BUILD
// {
//  "name": "web",
//  "version": "1.0.0",
//  "description": "TypeScript project with Browser Integration Tests",
//  "main": "dist/index.js",
//  "scripts": {
//    "build": "tsc",
//    "start": "node dist/index.js",
//    "test:pw": "playwright test",
//    "test:pw:headed": "playwright test --headed",
//    "test:cy": "cypress run",
//    "test:cy:open": "cypress open",
//    "test": "npm run test:pw && npm run test:cy"
//  },
//  "dependencies": {
//    "fastify": "^4.26.0"
//  },
//  "devDependencies": {
//    "@playwright/test": "^1.49.1",
//    "cypress": "^13.17.0",
//    "@types/node": "^22.10.2",
//    "typescript": "^5.7.2"
//  }
// }
//// SNIPPET:END

// Looking a the `package.json`, we see that all Typescript code is transpiled to Javascript prior to execution by `node`.

// Mill takes a slightly different approach. Rather than transpile `.ts` files to `.js`, Mill handles server-side and
// client-side Typescript differently.

// It uses the following third-party dependencies as **latent dependencies**:

// * **Typescript types**
// ** "@types/node@22.10.2"
// ** "@types/esbuild-copy-static-files@0.1.4"

// * **Typescript compiler** and *plugins*
// ** "typescript@5.7.2"
// ** "ts-node@^10.9.2"
// ** "tsconfig-paths@4.2.0"

// * **ESBuild bundler** and *plugins*
// ** "esbuild@0.24.0"
// ** "esbuild-plugin-copy@2.1.1"
// ** "esbuild-copy-static-files@0.1.0"
// ** "@esbuild-plugins/tsconfig-paths@0.1.2"

// Essentially, all server-side `.ts` files are executed directly using `ts-node` and related plugins.

// Client-side `.ts` files on the other hand are transpiled to `.js` and bundled using ESBuild and related plugins.

// == Latent Dependencies
// Note that the **latent dependencies** listed above will be added to the `package.json` generated by Mill for
// your Typescript project, even if you don't explicitly add them.

// If you want to use specific versions for any of those **latent dependencies**, you can override them in
// `TypeScriptModule#npmInstall()` inside `build.mill`.





// The original `tsconfig.json` used to set-up the project is in the file `old-tsconfig.json` and is reproduced below:
//// SNIPPET:BUILD
// {
//  "compilerOptions": {
//    "target": "ES2020",
//    "module": "commonjs",
//    "lib": ["ES2020", "DOM"],
//    "strict": true,
//    "esModuleInterop": true,
//    "skipLibCheck": true,
//    "forceConsistentCasingInFileNames": true,
//    "resolveJsonModule": true
//  },
//  "include": ["src/**/*"],
//  "exclude": ["node_modules", "tests", "dist"]
// }
//// SNIPPET:END

// The `tsconfig.json` generated by `TypeScriptModule` is significantly different from the original.
//// SNIPPET:BUILD
// {
//  "compilerOptions": {
//    "declarationDir": "./example/javascriptlib/testing/3-integration-suite/out/web/compile.dest/declarations",
//    "esModuleInterop": true,
//    "declaration": true,
//    "emitDeclarationOnly": true,
//    "paths": {
//    "web/*": [
//    "./example/javascriptlib/testing/3-integration-suite/out/web/compile.dest/typescript/src/*",
//    "./example/javascriptlib/testing/3-integration-suite/out/web/compile.dest/declarations/*"
//    ],
//    "@web/resources/*": [
//    "./example/javascriptlib/testing/3-integration-suite/out/web/compile.dest/typescript/resources/*"
//    ],
//    "*": [
//    "*"
//    ]
//  },
//    "baseUrl": "./example/javascriptlib/testing/3-integration-suite/out/web/npmInstall.dest/node_modules",
//    "typeRoots": [
//    "./example/javascriptlib/testing/3-integration-suite/out/web/npmInstall.dest/node_modules/@types",
//    "./example/javascriptlib/testing/3-integration-suite/out/web/compile.dest/declarations"
//    ]
//  },
//  "files": [
//  "./example/javascriptlib/testing/3-integration-suite/web/src/web.ts"
//  ]
// }
//// SNIPPET:END

// The file paths inside the generated `tsconfig.json` have been crafted to to adhere to the standard folder layout
// that Mill expects for any build it manages, so it is important to rename your existing `tsconfig.json` to something
// else e.g. `old-tsconfig.json` to avoid confusing the Typescript compiler.

// NOTE: The presence of multiple unrelated `tsconfig.json` files can lead to compilation and build failures that are
// hard to make sense of, so it is important to rename, then remove such files after adopting Mill.


/** Usage

 > ./mill web.run
...
 Server running at http://localhost:3000

*/
