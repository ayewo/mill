//// SNIPPET:BUILD
package build
import mill._, javalib._
import mill.javalib.Assembly._
import mill.scalalib.JlinkModule

object foo extends JavaModule with JlinkModule {
  def jlinkModuleName: T[String] = T { "foo" }
  def jlinkModuleVersion: T[Option[String]] = T { Option("1.0") }
  def jlinkCompressLevel: T[String] = T { "2" }
}
//// SNIPPET:END

// This example illustrates how to use Mill to generate a runtime image using the `jlink` tool.

// Most of the work is done by the `trait JlinkModule` in two steps:

// 1. it uses the `jmod` tool to create a `jlink.jmod` file for the main Java module. 
// The main Java module is typically the module containing the `mainClass`. 
// You can explicitly specify a `mainClass` by adding this line to your build file:
// def mainClass: T[Option[String]] = { Option("com.foo.app.Main") }
// If no `mainClass` is not explicitly specified, `JlinkModule` will infer it from `JavaModule` which is its parent trait . 
// See xref:javalib/module-config.adoc[Java Module Configuration] to learn more on how to influence the inference process.


// 2. it then uses the `jlink` tool, to link the previously created `jlink.jmod` with a runtime image.


// Note with respect to the `jlinkCompressLevel` option, the version of `jlink` that 
// ships with the JDK distribution from Oracle JDK will only accept [`0`, `1`, `2`] 
// as valid values for compression, with `0` being "no compression" 
// and 2 being "zip compression".

// On recent builds of OpenJDK and related distributions, `jlink` will accept those values 
// but it will issue a deprecation warning.
// Valid values on OpenJDK range between: ["zip-0" - "zip-9"].





/** Usage

// To use the Oracle JDK, first set your `JAVA_HOME` environment variable
// export JAVA_HOME=/Users/mac/.sdkman/candidates/java/17.0.9-oracle/

> mill foo.jlinkAppImage

> mill show foo.jlinkAppImage
".../out/foo/jlinkAppImage.dest/jlink-runtime"

> ./out/foo/jlinkAppImage.dest/jlink-runtime/bin/jlink
Nov 27, 2024 7:21:12 PM foo.Bar main
INFO: Hello World!

*/
